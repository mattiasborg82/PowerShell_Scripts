param ($hostlist)Foreach ($url in $hostlist){ write-host "Testing $url" -foregroundcolor green $request = Invoke-WebRequest -uri "https://api.ssllabs.com/api/v2/analyze?host=$($url)" | convertfrom-json while (($Request.status -ne "READY") -or ($Request.status -ne "ERROR")) { Write-Host "$($request.status), sleeping for 10 seconds" Start-Sleep -seconds 10 $Request = Invoke-WebRequest -uri "https://api.ssllabs.com/api/v2/analyze?host=$($url)" | convertfrom-json }  if ($Request.status -eq "ERROR")  {    New-Object -Type PSObject -Property @{    Host = $url    IpAddress = "N/A"    serverName = "N/A"    statusMessage = "N/A"    grade = "N/A"    gradeTrustIgnored = "N/A"    hasWarnings = "N/A"    isExceptional = "N/A"    progress = "N/A"    duration = "N/A"    eta = "N/A"    delegation = "N/A"    TestTime = "N/A"    Success = $false    }  }else  {   $EndPoints = $request.Endpoints   $TestTime = [DateTimeOffset]::FromUnixTimeMilliseconds($($request.testTime)) | %{$_.DateTime}      New-Object -Type PSObject -Property @{     Host = $url     IpAddress = $EndPoints.ipAddress     serverName = $EndPoints.serverName     statusMessage = $EndPoints.statusMessage     grade = $EndPoints.grade     gradeTrustIgnored = $EndPoints.gradeTrustIgnored     hasWarnings = $EndPoints.hasWarnings     isExceptional = $EndPoints.isExceptional     progress = $EndPoints.progress     duration = "$($EndPoints.duration/1000) s"      eta = $EndPoints.eta     delegation = $EndPoints.delegation     TestTime = $TestTime     Success = $True     }  }  }
